package smt_test

import (
	"testing"

	"github.com/consensys/accelerated-crypto-monorepo/crypto/state-management/hashtypes"
	"github.com/consensys/accelerated-crypto-monorepo/crypto/state-management/smt"
	"github.com/stretchr/testify/require"
)

// Root hash of the empty tree
func TestEmptyRootHashMiMC(t *testing.T) {
	config := &smt.Config{
		HashFunc: hashtypes.MiMC,
		Depth:    40,
	}

	tree := smt.NewEmptyTree(config)

	// Root hash of the empty tree
	require.Equal(
		t,
		"0x20db821ba241b576eb317b2a56f80fd277540940789a9464bf24fa9d00636ca9",
		tree.Root.Hex(),
	)
}

// Root hash of the tree after writing the leaf 0x1
func TestOneLeafRootHashMiMC(t *testing.T) {

	config := &smt.Config{
		HashFunc: hashtypes.MiMC,
		Depth:    40,
	}

	tree := smt.NewEmptyTree(config)

	// Insert leaf `0x1` in position zero
	leaf := smt.Digest{}
	leaf[31] = 1
	tree.Update(0, leaf)

	require.Equal(
		t,
		"0x126abef4494fb404c4793b0c486ef63c4265d5f8ac9beba1b306c6076cde1b62",
		tree.Root.Hex(),
	)
}

// Test merkle-proof at a random position on an empty tree
func TestDefaultMerkleProofMiMC(t *testing.T) {

	config := &smt.Config{
		HashFunc: hashtypes.MiMC,
		Depth:    40,
	}

	tree := smt.NewEmptyTree(config)
	proof := tree.Prove(37)

	require.Equal(t,
		"&smt.Proof{Path: 37, Siblings: [0000000000000000000000000000000000000000000000000000000000000000 29a1ce46748dd1f268a52b64670d2dd170487b0eabfdf8e3280c52996af03561 173028dc3fc24d89b918ab4952f667ec2f8ea5341ce6c3202b0fefee6cf76041 07cd5828f4e95899b5539065896b855b7684478e6cf2f9e1162ea9a031471846 2e924806f112e278db1694edc2d6b7127053bcddfb24c55c9c47d578c47f0ec8 29c27f9d279e3f52b51787e2a648a66f7a60e62497209bf986faa59419a91daa 1fc412ce46c3b2d344fec6237ac75033da3211884966dedd2b1a685b014f2d13 1aa56b9fb75c97d91fa20c2ce17e86dc0c34b65836c9ba22107318b74634ec22 2b04d6771aa832c8ac1d79a952ae8bacafaf093f023d4c83309995d0abe5e8b9 0ac75ef3e6cdfbe1c105f179df08bb61224350a619390c7d0ae0a49c567bdd47 214dc26f4b6f38c484cb304fdf042bc7b9402640a2f1fc6c7cfb1b006c17c390 1c26c9e8963ed1d3e8e18eb36672186cfbda944795465db9496780a13e0b082d 0df1496ebc60b806f4f712155ae3953493b54d911386b03033a075d8550813e1 26afa3a82762a461a8895be815960a9a61acdd641223176789263c79f20654eb 0e6038b3d33f66cf8bd05e0511862e165ce79afbd2b03a6d6a0a0818148316bd 0b36746bc15c76db06d9b0a3b399ce9372403f1b928431dd544059238e9e1d15 2b44e255c63ae690467e1541623c37ac9e2d06bb95b794debbb40dc69973a445 24dbf0f1835370bf7f9ec5eb500bbeac2bf5c41504f29999cddf3c79eaa9bf37 12354fbc87fb38377cbfbeae87585eb141c373aa61a072ff86cec7efd5c7a569 253c6498543a14e1bfdd21b2c5ea572666ba6c450075b6c104294dcfbb5a29c3 19980a40aff0d7157f11ea2e834116494721ccfbaa9d90d6b1b69a66621f5552 01987180f8ab0ad6da96c2bd4ad93b28a58ed8fc020b85127f156a603d3569be 1f44b7c7fdc4efebb3799352c5b7fe449d62d5e6e0fb7297b328c7e2b3d7eef0 1f4a48ef184635ec978659c1f5bbb3b633b52ac1cfdf03327958f305259dfe62 02c296e675a4c76f85779386952762c8c15020c90531190bd2c20c2f522e491d 22fe5e952f220e4f2ca8ff87e5921b08683064c521fea942bf92c8e2532f92ff 28063ba1db95bda8a256f10fc6a74b0be7e54bbb2971ec45451b903ce872f0e8 255e9ebb837d0e1f8f319d3d479294abe31254aedc63250e5d7db32e23d8ef9d 298c7e7a54599edb03e2a5d4336245696e9b181f5d6929d8869516f319c0e2b0 15fe20db6b9027a70037d96311e02f9743931c857747bad2d969b3a84fc52e55 168961f185851b92bb9f7e130f872c65c2ef2e78e28d0b7f1d65c1e88db3506b 0e6109c81f60a9a1dc1a1dc417b8d61f8b005c4bd18f2f26d35d29d92e90c7fb 01abc4d0808e21dc4755d7e39a001b9efd6fec73af45bbc09fffaf6a7035c081 23f079e1eb77786681e1447bc5ddb2b0ea7ccb01e40a99b6ff56339c884ba13d 190bec88beb0a878950c6d48f5e9a5b84f65a699a48e9b176152abee95ae2cf6 2d3dbe9694f65a1a380e3cdc92145a6e4815ce22304dab5ec90207f0493c8a21 1c477aa6e33b02996c81cedf8d1e88c9cc6ea40784191e391d23979dcb0208ec 1798747385b7e3752743a21e1dde652c9dee1106d61fa56ccb91cff1e6434884 1254d0207708e41336c9e607dfb109ed26eaa974b75ff9ababcfde3ff70a169a 303b0a04f392124e9264916d8b752241e24f97fa2fa1276d5a7ad197fed3c9c5]}",
		proof.String(),
	)
}

// Test merkle-proof at a random position on a non-empty tree
func TestMerkleProofAfterUpdateMiMC(t *testing.T) {

	config := &smt.Config{
		HashFunc: hashtypes.MiMC,
		Depth:    40,
	}

	tree := smt.NewEmptyTree(config)

	// Insert 0x0 at position 0, 0x1 at position 1 and so on
	for i := 0; i < 1024; i++ {
		leaf := smt.Digest{}
		leaf[31] = byte(i & 0xff)
		leaf[30] = byte(i & 0xff00)
		tree.Update(i, leaf)
	}

	require.Equal(
		t,
		"0x2288bd8a7a9e845f3149ae6b4e6449d275d1b9f00b0311d6305c90c16882c6b0",
		tree.Root.Hex(),
	)

	proof := tree.Prove(37)

	require.Equal(
		t,
		"&smt.Proof{Path: 37, Siblings: [0000000000000000000000000000000000000000000000000000000000000024 241c15e75e4fa454972f92482e5cfdc3d0e91d0757d0e398c37ea5c0bc6f558a 0b798052d8e1562a2db6f206a71f8b758ae7f6652444ae8f96164206415c6505 21dab2f379768c0fcdb47c51059161a3e859edd7519e3fc8508493c88f0212ca 17ebb973a8f5decbf9a2a11e5f479e20d681c77d10987c492b95947a8f724449 2d31a198c3265064ce5534b0453bea3274b8f314fe528c5f4a66b6d2bf642bdc 162d6122e2d1e79fc82777b0335239288bc155280bea0866d5d633f3cf4d2c34 1cccd8b07a3f9db4a0c324bb6aa3876b196dd2ad2e905f4aa11c7868c647ac6c 00af319150d225f363c05162e0d6c00bb7fd0a9e615ba95173c84ed9c04a8a3b 2054127d50b644a632af7369001029fc0ac330b434c05c4ffbf56685a50c374d 214dc26f4b6f38c484cb304fdf042bc7b9402640a2f1fc6c7cfb1b006c17c390 1c26c9e8963ed1d3e8e18eb36672186cfbda944795465db9496780a13e0b082d 0df1496ebc60b806f4f712155ae3953493b54d911386b03033a075d8550813e1 26afa3a82762a461a8895be815960a9a61acdd641223176789263c79f20654eb 0e6038b3d33f66cf8bd05e0511862e165ce79afbd2b03a6d6a0a0818148316bd 0b36746bc15c76db06d9b0a3b399ce9372403f1b928431dd544059238e9e1d15 2b44e255c63ae690467e1541623c37ac9e2d06bb95b794debbb40dc69973a445 24dbf0f1835370bf7f9ec5eb500bbeac2bf5c41504f29999cddf3c79eaa9bf37 12354fbc87fb38377cbfbeae87585eb141c373aa61a072ff86cec7efd5c7a569 253c6498543a14e1bfdd21b2c5ea572666ba6c450075b6c104294dcfbb5a29c3 19980a40aff0d7157f11ea2e834116494721ccfbaa9d90d6b1b69a66621f5552 01987180f8ab0ad6da96c2bd4ad93b28a58ed8fc020b85127f156a603d3569be 1f44b7c7fdc4efebb3799352c5b7fe449d62d5e6e0fb7297b328c7e2b3d7eef0 1f4a48ef184635ec978659c1f5bbb3b633b52ac1cfdf03327958f305259dfe62 02c296e675a4c76f85779386952762c8c15020c90531190bd2c20c2f522e491d 22fe5e952f220e4f2ca8ff87e5921b08683064c521fea942bf92c8e2532f92ff 28063ba1db95bda8a256f10fc6a74b0be7e54bbb2971ec45451b903ce872f0e8 255e9ebb837d0e1f8f319d3d479294abe31254aedc63250e5d7db32e23d8ef9d 298c7e7a54599edb03e2a5d4336245696e9b181f5d6929d8869516f319c0e2b0 15fe20db6b9027a70037d96311e02f9743931c857747bad2d969b3a84fc52e55 168961f185851b92bb9f7e130f872c65c2ef2e78e28d0b7f1d65c1e88db3506b 0e6109c81f60a9a1dc1a1dc417b8d61f8b005c4bd18f2f26d35d29d92e90c7fb 01abc4d0808e21dc4755d7e39a001b9efd6fec73af45bbc09fffaf6a7035c081 23f079e1eb77786681e1447bc5ddb2b0ea7ccb01e40a99b6ff56339c884ba13d 190bec88beb0a878950c6d48f5e9a5b84f65a699a48e9b176152abee95ae2cf6 2d3dbe9694f65a1a380e3cdc92145a6e4815ce22304dab5ec90207f0493c8a21 1c477aa6e33b02996c81cedf8d1e88c9cc6ea40784191e391d23979dcb0208ec 1798747385b7e3752743a21e1dde652c9dee1106d61fa56ccb91cff1e6434884 1254d0207708e41336c9e607dfb109ed26eaa974b75ff9ababcfde3ff70a169a 303b0a04f392124e9264916d8b752241e24f97fa2fa1276d5a7ad197fed3c9c5]}",
		proof.String(),
	)
}
