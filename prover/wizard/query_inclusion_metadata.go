// Code generated by bavard DO NOT EDIT

package wizard
import (
	"strconv"

	"github.com/consensys/gnark/frontend"
)

func (i *QueryInclusion) WithTags(tags ...string) *QueryInclusion {
	i.metadata.tags = append(i.metadata.tags, tags...)
	return i
}

func (i *QueryInclusion) WithName(name string) *QueryInclusion {
	i.metadata.name = name
	return i
}

func (i *QueryInclusion) WithDoc(doc string) *QueryInclusion {
	i.metadata.doc = doc
	return i
}

func (i *QueryInclusion) Tags() []string {
	return i.metadata.tags
}

func (i *QueryInclusion) ListTags() []string {
	return i.metadata.listTags()
}

func (i *QueryInclusion) HasTag(tag string) bool {
	tags := i.Tags()
	for i := range tags {
		if tags[i] == tag {
			return true
		}
	}
	return false
}

func (i *QueryInclusion) String() string {
	return i.metadata.scope.getFullScope() + "/" + i.metadata.nameOrDefault(i) + "/" + strconv.Itoa(int(i.metadata.id))
}

func (i *QueryInclusion) Explain() string {
	return i.metadata.explain(i)
}
func (i *QueryInclusion) id() id {
	return i.metadata.id
}
// computeResult does not return any result for [QueryInclusion] because Global
// constraints do not return results as they are purely constraints that must
// be satisfied.
func (i QueryInclusion) computeResult(run Runtime) QueryResult {
	return &QueryResNone{}
}

// computeResult does not return any result for [QueryInclusion] because Global
// constraints do not return results.
func (i QueryInclusion) computeResultGnark(_ frontend.API, run RuntimeGnark) QueryResultGnark {
	return &QueryResNoneGnark{}
}
