import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
  id 'com.diffplug.spotless' version '6.16.0'
  id("org.jetbrains.kotlin.jvm")
}

allprojects {
  repositories { mavenCentral() }

  ext {
    versions = [
      vertx          : "4.4.2",
      micrometer     : "1.8.4",
      tuweni         : "2.3.1",
      jackson        : "2.14.2",
      web3j          : "4.9.8",
      besu           : "22.4.2",
      teku           : "23.1.1",
      ktlint         : "0.47.0",
      picoli         : "4.7.1",
      hoplite        : "2.7.4",
      caffeine       : "3.1.6",
      netty          : "4.1.92.Final",
      kotlinxDatetime: "0.4.0",
      test           : [
        "wiremock"   : "2.29.0",
        "restassured": "5.3.0"
      ]
    ]
  }

  apply plugin: 'org.jetbrains.kotlin.jvm'
  apply plugin: 'com.diffplug.spotless'
  apply plugin: 'jacoco'

  spotless {
    kotlin {
      // by default the target is every '.kt' and '.kts` file in the java sourcesets
      //ktfmt()
      ktlint(versions.ktlint.toString()).setEditorConfigPath("$rootDir/.editorconfig")
    }
  }

  tasks.withType(JavaCompile) {
    options.deprecation = true
    options.compilerArgs += [
      '-parameters',
      '-Xlint:unchecked',
      // '-Xlint:cast', generating too much noise now with Protobuf
      '-Xlint:rawtypes',
      '-Xlint:overloads',
      '-Xlint:divzero',
      '-Xlint:finally',
      '-Xlint:static',
      '-Xlint:deprecation',
      // '-Werror',
    ]
    options.encoding = 'UTF-8'
  }

  jacoco {
    toolVersion = '0.8.7'
    if (project.tasks.findByName('integrationTest')) {
      applyTo integrationTest
    }
    if (project.tasks.findByName('acceptanceTest')) {
      applyTo acceptanceTest
    }
  }

  test {
    finalizedBy jacocoTestReport
    testLogging {
      events TestLogEvent.FAILED,
        TestLogEvent.SKIPPED,
        TestLogEvent.STANDARD_ERROR
      exceptionFormat TestExceptionFormat.FULL
      showCauses true
      showExceptions true
      showStackTraces true
      // set showStandardStreams if you need to see test logs
      showStandardStreams false
    }
  }

  jacocoTestReport {
    dependsOn test
  }
}

task jacocoRootReport(type: JacocoReport) {
  additionalSourceDirs.from files(subprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories.from files(subprojects.sourceSets.main.allSource.srcDirs)
  classDirectories.from files(subprojects.sourceSets.main.output)

  executionData.from fileTree(dir: '.', includes: ['**/jacoco/*.exec'])
  reports {
    xml.required = true
    // xml.enabled = true FIXME: deprecated, breaking latest versions of gradle.
    csv.required = true
    html.destination file("build/reports/jacocoHtml")
  }
  onlyIf = { true }
}
