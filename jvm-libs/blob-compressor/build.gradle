plugins {
  id 'net.consensys.zkevm.kotlin-library-conventions'
}

dependencies {
  api "net.java.dev.jna:jna:${versions.jna}"
  testImplementation project(":jvm-libs:kotlin-extensions")
}

jar {
  dependsOn configurations.runtimeClasspath
}

task buildNativeBlobCompressorLib {
  def destinationDir = "$projectDir/src/main/resources/net/consensys/linea/nativecompressor"
  def libBlobCompressorName = "libblob_compressor_native_jna"
  def libShnarfCalculatorName = "libshnarf_calculator_native_jna"

  inputs.dir("$rootDir/prover")
  outputs.cacheIf { true }
  outputs.files(
    "$destinationDir/$libBlobCompressorName",
    "$destinationDir/$libShnarfCalculatorName"
  )

  doLast {
    exec {
      workingDir "$rootDir/prover"
      executable "make"
      args "lib/compressor-and-shnarf-calculator-local"
    }
    copy {
      // _native_ target is whatever architecture we are building on.
      // This works because CI is linux-x86_64, and production is the same. Local dev is whatever you have.
      // I the future we want to copy linux-x86_64, linux-arm64, macos-x86_64, macos-arm64
      // inside resources, and load the right one at runtime.
      from "$rootDir/prover/lib/compressor/build/$libBlobCompressorName",
        "$rootDir/prover/lib/compressor/compressor_dict.bin",
        "$rootDir/prover/lib/shnarf_calculator/build/$libShnarfCalculatorName"
      into "$destinationDir"
    }
  }
}

processResources {
  dependsOn buildNativeBlobCompressorLib
}

compileKotlin {
  dependsOn buildNativeBlobCompressorLib
}

test {
  // we cannot have more 1 compressor per JVM, hence we disable parallel execution
  // because multiple threads would cause issues with the native library
  systemProperties["junit.jupiter.execution.parallel.enabled"] = false
  maxParallelForks = 1
}
