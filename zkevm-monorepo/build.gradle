import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

import java.time.Duration
import java.time.Instant

plugins {
  id 'com.diffplug.spotless' version '6.16.0'
  id("org.jetbrains.kotlin.jvm")
  alias(libs.plugins.docker)
}

allprojects {
  repositories { mavenCentral() }

  ext {
    versions = [
      micrometer     : "1.8.4",
      tuweni         : "2.3.1",
      jackson        : "2.14.2",
      web3j          : "4.11.0",
      besu           : "22.4.2",
      teku           : "23.1.1",
      picoli         : "4.7.1",
      hoplite        : "2.7.4",
      caffeine       : "3.1.6",
      netty          : "4.1.92.Final",
      kotlinxDatetime: "0.4.0",
      jna            : "5.14.0",
      test           : [
        "junit"      : "5.10.1",
        "wiremock"   : "3.0.1",
        "restassured": "5.3.0"
      ]
    ]
  }

  apply plugin: 'org.jetbrains.kotlin.jvm'
  apply plugin: 'com.diffplug.spotless'
  apply plugin: 'jacoco'

  spotless {
    kotlin {
      // by default the target is every '.kt' and '.kts` file in the java sourcesets
      //ktfmt()
      ktlint(libs.versions.ktlint.get().toString()).setEditorConfigPath("$rootDir/.editorconfig")
    }
  }

  tasks.withType(JavaCompile).configureEach {
    options.deprecation = true
    options.compilerArgs += [
      '-parameters',
      '-Xlint:unchecked',
      // '-Xlint:cast', generating too much noise now with Protobuf
      '-Xlint:rawtypes',
      '-Xlint:overloads',
      '-Xlint:divzero',
      '-Xlint:finally',
      '-Xlint:static',
      '-Xlint:deprecation',
      // '-Werror',
    ]
    options.encoding = 'UTF-8'
  }

  jacoco {
    toolVersion = '0.8.7'
    if (project.tasks.findByName('integrationTest')) {
      applyTo integrationTest
    }
    if (project.tasks.findByName('acceptanceTest')) {
      applyTo acceptanceTest
    }
  }

  tasks.withType(Test).configureEach {
    testLogging {
      events TestLogEvent.FAILED,
        TestLogEvent.SKIPPED,
        TestLogEvent.STANDARD_ERROR
      exceptionFormat TestExceptionFormat.FULL
      showCauses true
      showExceptions true
      showStackTraces true
      // set showStandardStreams if you need to see test logs
      showStandardStreams false
    }
    systemProperty("L1_RPC_URL", "http://localhost:8445")
    systemProperty("L2_RPC_URL", "http://localhost:8545")
    systemProperty("L1_GENESIS", "docker/config/l1-node/el/genesis.json")
    systemProperty("L2_GENESIS", "docker/config/linea-local-dev-genesis.json")

    // Temp disable parallel test execution hardhat hangs in CI when deploying multiple contract in parallel
    if (System.env['CI'] == null) {
      systemProperties["junit.jupiter.execution.timeout.default"] = "5 m" // 5 minutes
      systemProperties["junit.jupiter.execution.parallel.enabled"] = true
      systemProperties["junit.jupiter.execution.parallel.mode.default"] = "concurrent"
      systemProperties["junit.jupiter.execution.parallel.mode.classes.default"] = "concurrent"
      maxParallelForks = Math.max(Runtime.runtime.availableProcessors(), 9)
    }
  }

  jacocoTestReport {
    dependsOn test
  }
}

task jacocoRootReport(type: JacocoReport) {
  additionalSourceDirs.from files(subprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories.from files(subprojects.sourceSets.main.allSource.srcDirs)
  classDirectories.from files(subprojects.sourceSets.main.output)

  executionData.from fileTree(dir: '.', includes: ['**/jacoco/*.exec'])
  reports {
    xml.required = true
    // xml.enabled = true FIXME: deprecated, breaking latest versions of gradle.
    csv.required = true
    html.destination file("build/reports/jacocoHtml")
  }
  onlyIf = { true }
}

dockerCompose {
  localStack {
    startedServices = [
      "postgres",
      "sequencer",
      "l1-node-genesis-generator",
      "l1-el-node",
      "l1-cl-node",
      "l2-node",
      // For debug
      // "l1-blockscout",
      // "l2-blockscout"
    ]
    composeAdditionalArgs = ["--profile", "l1", "--profile", "l2"]
    useComposeFiles = ["${project.rootDir.path}/docker/compose.yml"]
    waitForHealthyStateTimeout = Duration.ofMinutes(3)
    waitForTcpPorts = false
    removeOrphans = true
    // this is to avoid recreating the containers
    // specially l1-node-genesis-generator which corrupts the state if run more than once
    // without cleaning the volumes
    noRecreate = true
    projectName = "docker"
    environment.put("L1_GENESIS_TIME", "${Instant.now().plusSeconds(3).getEpochSecond()}")
  }
}
