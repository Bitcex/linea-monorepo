plugins {
  id 'net.consensys.zkevm.kotlin-application-conventions'
  id 'net.consensys.zkevm.linea-contracts-helper'
  id 'com.github.johnrengelman.shadow' version '7.1.2'
}

configurations.configureEach {
  exclude group: "org.rocksdb", module: "rocksdbjni"
  exclude group: "it.unimi.dsi", module: "fastutil"
}

dependencies {
  implementation project(':jvm-libs:json-rpc')
  implementation project(':jvm-libs:http-rest')
  implementation project(':jvm-libs:vertx-helper')
  implementation project(':jvm-libs:future-extensions')
  implementation project(':jvm-libs:web3j-extensions')
  implementation project(':jvm-libs:core:metrics')
  implementation project(':jvm-libs:metrics:micrometer')
  implementation project(':jvm-libs:core:domain-models')
  implementation project(':coordinator:utilities')
  implementation project(':coordinator:core')
  implementation project(':coordinator:clients:shomei-client')
  implementation project(':coordinator:clients:traces-generator-api-client')
  implementation project(':coordinator:clients:type2-state-manager-client')
  implementation project(':coordinator:clients:prover-client:file-based-client')
  implementation project(':coordinator:clients:smart-contract-client')
  implementation project(':coordinator:ethereum:finalization-monitor')
  implementation project(':coordinator:ethereum:common')
  implementation project(':coordinator:ethereum:models-helper')
  implementation project(':coordinator:ethereum:blob-submitter')
  implementation project(':coordinator:ethereum:message-anchoring')
  implementation project(':coordinator:clients:web3signer-client')
  implementation project(':coordinator:persistence:db')
  implementation project(':coordinator:persistence:blob')
  implementation project(':coordinator:persistence:aggregation')
  implementation project(':coordinator:persistence:batch')
  implementation project(':coordinator:persistence:feehistory')
  implementation "tech.pegasys.teku.internal:unsigned:${versions.teku}"
  implementation "tech.pegasys.teku.internal:logging:${versions.teku}"
  implementation "tech.pegasys.teku.internal:infrastructure-events:${versions.teku}"
  implementation "tech.pegasys.teku.internal:executionclient:${versions.teku}"
  implementation "tech.pegasys.teku.internal:bytes:${versions.teku}"

  implementation "info.picocli:picocli:${versions.picoli}"
  implementation "io.vertx:vertx-web-client"
  implementation "com.sksamuel.hoplite:hoplite-core:${versions.hoplite}"
  implementation "com.sksamuel.hoplite:hoplite-toml:${versions.hoplite}"
  implementation("org.web3j:core:${versions.web3j}") {
    exclude group: 'org.slf4j', module: 'slf4j-nop'
  }
  api("io.netty:netty-transport-native-epoll:${versions.netty}:linux-x86_64") {
    because "It enables native transport for Linux."
    // Note that its version should match netty version used in Vertx
  }
  api("io.netty:netty-transport-native-kqueue:${versions.netty}:osx-x86_64") {
    because "It enables native transport for Mac OSX."
    // Note that its version should match netty version used in Vertx
  }
  // Transaction encoding
  implementation "org.hyperledger.besu:besu-datatypes:${versions.besu}"
  implementation "org.hyperledger.besu.internal:rlp:${versions.besu}"
  implementation "org.hyperledger.besu:evm:${versions.besu}"
  implementation "org.hyperledger.besu.internal:core:${versions.besu}"
  implementation "org.hyperledger.besu.internal:crypto:${versions.besu}"

  implementation "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
  implementation "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
  implementation "com.fasterxml.jackson.module:jackson-module-kotlin:${versions.jackson}"
  implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jackson}")

  testImplementation "com.github.tomakehurst:wiremock-jre8:${versions.test.wiremock}"
  testImplementation "org.apache.logging.log4j:log4j-slf4j2-impl:2.20.0"
  testImplementation project(':coordinator:ethereum:test-utils')
  testImplementation "io.vertx:vertx-junit5"
}

application {
  mainClass = 'net.consensys.zkevm.coordinator.app.CoordinatorAppMain'
}

jar {
  archiveBaseName = 'coordiantor'
  dependsOn configurations.runtimeClasspath
  manifest {
    attributes(
      'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.findAll { it.endsWith('jar') }.join(' '),
      'Main-Class': 'net.consensys.zkevm.coordinator.app.CoordinatorAppMain',
      'Multi-Release': 'true'
    )
  }
}

distributions {
  main {
    distributionBaseName = 'coordinator'
  }
}

run {
  workingDir = rootProject.projectDir
  jvmArgs = [
    "-Dvertx.configurationFile=config/coordinator/vertx-options.json",
    "-Dlog4j2.configurationFile=config/coordinator/log4j2-dev.xml"
  ] + System.properties.entrySet()
    .findAll { it.key.startsWith("config") }
    .collect { "-D${it.key}=${it.value}" }
  args = ["--traces-limits", "config/common/traces-limits-v1.toml", "--smart-contract-errors", "config/common/smart-contract-errors.toml", "--gas-price-cap-time-of-day-multipliers", "config/common/gas-price-cap-time-of-day-multipliers.toml", "config/coordinator/coordinator-docker.config.toml", "config/coordinator/coordinator-local-dev.config.overrides.toml"]
}

sourceSets {
  integrationTest {
    kotlin {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
    compileClasspath += sourceSets.main.output + sourceSets.main.compileClasspath + sourceSets.test.compileClasspath
    runtimeClasspath += sourceSets.main.output + sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
  }
}

tasks.register('integrationTest', Test) {
  test ->
    description = "Runs integration tests."
    group = "verification"
    useJUnitPlatform()

    classpath = sourceSets.integrationTest.runtimeClasspath
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    dependsOn(":localStackComposeUp")
    dependsOn(compileContracts)
}

check.finalizedBy("integrationTest")
