import org.web3j.codegen.SolidityFunctionWrapperGenerator

buildscript {
  repositories {
    maven { url("https://plugins.gradle.org/m2/") }
    // needed for web3j 4.11.0 onwards because of KZG dependency of web3j
    maven { url "https://artifacts.consensys.net/public/maven/maven/" }
  }
}

plugins {
  id 'net.consensys.zkevm.kotlin-library-conventions'
  //alias(libs.plugins.web3j)
  id("org.web3j") version "4.11.0"
}

def abisDirectory =  layout.buildDirectory.dir("${rootProject.projectDir}/contracts/abi").get()
def generatedJavaWrappers = layout.buildDirectory.dir("generated/sources/web3j/main/java").get()

dependencies {
  implementation(project(":jvm-libs:kotlin-extensions"))
  implementation("org.web3j:core:${versions.web3j}") {
    exclude group: 'org.slf4j', module: 'slf4j-nop'
  }
  implementation "io.vertx:vertx-core"
  implementation project(path: ':jvm-libs:web3j-extensions')
  implementation project(path: ':coordinator:core')
  implementation project(path: ':coordinator:ethereum:common')
  testImplementation "io.vertx:vertx-junit5"
}

sourceSets {
  main {
    java.srcDir generatedJavaWrappers
  }
}

compileJava {
  source("generateLineaContractWrappers.outputs")
  dependsOn("generateLineaContractWrappers")
}

compileKotlin {
  source("generateLineaContractWrappers.outputs")
  dependsOn("generateLineaContractWrappers")
}

task generateLineaContractWrappers(type: DefaultTask) {
  inputs.dir(abisDirectory)
  outputs.dir(generatedJavaWrappers)
  doFirst {
    abisDirectory.asFile.mkdirs()
    fileTree(abisDirectory).matching {
      include "**/L2MessageService.abi", "**/LineaRollup.abi"
    }.each {
      String[] params = [
        "--abiFile",
        it.getAbsolutePath(),
        "--outputDir",
        generatedJavaWrappers,
        "--package",
        "net.consensys.linea.contract"]
      SolidityFunctionWrapperGenerator.main(params)
    }
  }
}
